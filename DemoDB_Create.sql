/*
Deployment script for DemoDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DemoDB"
:setvar DefaultFilePrefix "DemoDB"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE Hebrew_CI_AS
GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS OFF,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                ENABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [demoUser]...';


GO
CREATE LOGIN [demoUser]
    WITH PASSWORD = N'demoPassword';


GO
PRINT N'Creating [demoUser]...';


GO
CREATE USER [demoUser] FOR LOGIN [demoUser];


GO
PRINT N'Creating [Operation]...';


GO
CREATE SCHEMA [Operation]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Lists]...';


GO
CREATE SCHEMA [Lists]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Billing]...';


GO
CREATE SCHEMA [Billing]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Sales]...';


GO
CREATE SCHEMA [Sales]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Marketing]...';


GO
CREATE SCHEMA [Marketing]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [Inventory]...';


GO
CREATE SCHEMA [Inventory]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [dbo].[UDT_ColumnOrder]...';


GO
CREATE TYPE [dbo].[UDT_ColumnOrder] AS TABLE (
    [ColumnOrdinal] INT NOT NULL,
    [ColumnID]      INT NOT NULL,
    [IsAscending]   BIT NOT NULL);


GO
PRINT N'Creating [dbo].[UDT_FilterParameters]...';


GO
CREATE TYPE [dbo].[UDT_FilterParameters] AS TABLE (
    [ParamIndex] INT            NOT NULL,
    [ColumnID]   INT            NOT NULL,
    [OperatorID] INT            NOT NULL,
    [Value]      NVARCHAR (MAX) NOT NULL);


GO
PRINT N'Creating [dbo].[FilterColumns]...';


GO
CREATE TABLE [dbo].[FilterColumns] (
    [ColumnID]                       INT            IDENTITY (1, 1) NOT NULL,
    [ColumnFilterTableAlias]         [sysname]      NOT NULL,
    [ColumnRealName]                 [sysname]      NOT NULL,
    [ColumnSqlDataType]              VARCHAR (50)   NOT NULL,
    [ColumnDisplayName]              NVARCHAR (200) NULL,
    [ColumnSortEnabled]              BIT            NOT NULL,
    [ColumnSupportedFilterOperators] VARCHAR (100)  NULL,
    [QueryForAvailableValues]        VARCHAR (4000) NULL,
    PRIMARY KEY CLUSTERED ([ColumnID] ASC)
);


GO
PRINT N'Creating [dbo].[FilterOperators]...';


GO
CREATE TABLE [dbo].[FilterOperators] (
    [OperatorID]       INT            NOT NULL,
    [IsMultiValue]     BIT            NOT NULL,
    [OperatorName]     VARCHAR (50)   NOT NULL,
    [OperatorTemplate] VARCHAR (4000) NOT NULL,
    PRIMARY KEY CLUSTERED ([OperatorID] ASC)
);


GO
PRINT N'Creating [dbo].[FilterTables]...';


GO
CREATE TABLE [dbo].[FilterTables] (
    [FilterTableAlias] [sysname] NOT NULL,
    [FilterTableName]  [sysname] NOT NULL,
    PRIMARY KEY CLUSTERED ([FilterTableAlias] ASC)
);


GO
PRINT N'Creating [Operation].[SessionEvents]...';


GO
CREATE TABLE [Operation].[SessionEvents] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [MemberId]    INT             NOT NULL,
    [SessionId]   INT             NOT NULL,
    [EventTypeId] TINYINT         NOT NULL,
    [DateAndTime] DATETIME2 (3)   NOT NULL,
    [URL]         NVARCHAR (1000) NOT NULL,
    CONSTRAINT [pk_SessionEvents_c_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Operation].[SessionEvents].[ix_SessionEvents_c_nu_DateAndTime]...';


GO
CREATE CLUSTERED INDEX [ix_SessionEvents_c_nu_DateAndTime]
    ON [Operation].[SessionEvents]([DateAndTime] ASC);


GO
PRINT N'Creating [Operation].[SessionEvents].[ix_SessionEvents_nc_nu_SessionId]...';


GO
CREATE NONCLUSTERED INDEX [ix_SessionEvents_nc_nu_SessionId]
    ON [Operation].[SessionEvents]([SessionId] ASC);


GO
PRINT N'Creating [Operation].[Invitations]...';


GO
CREATE TABLE [Operation].[Invitations] (
    [Id]                  INT           IDENTITY (1, 1) NOT NULL,
    [RequestingSessionId] INT           NOT NULL,
    [ReceivingMemberId]   INT           NOT NULL,
    [CreationDateTime]    DATETIME2 (0) NOT NULL,
    [StatusId]            TINYINT       NOT NULL,
    [ResponseDateTime]    DATETIME2 (0) NULL,
    CONSTRAINT [pk_Invitations_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Operation].[Invitations].[ix_Invitations_nc_nu_StatusId]...';


GO
CREATE NONCLUSTERED INDEX [ix_Invitations_nc_nu_StatusId]
    ON [Operation].[Invitations]([StatusId] ASC);


GO
PRINT N'Creating [Operation].[MemberSessions]...';


GO
CREATE TABLE [Operation].[MemberSessions] (
    [Id]            INT           IDENTITY (1, 1) NOT NULL,
    [MemberId]      INT           NOT NULL,
    [LoginDateTime] DATETIME2 (0) NOT NULL,
    [EndDateTime]   DATETIME2 (0) NULL,
    [EndReasonId]   TINYINT       NULL,
    CONSTRAINT [pk_MemberSessions_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Operation].[MemberSessions].[ix_MemberSessions_nc_nu_LoginDateTime]...';


GO
CREATE NONCLUSTERED INDEX [ix_MemberSessions_nc_nu_LoginDateTime]
    ON [Operation].[MemberSessions]([LoginDateTime] ASC);


GO
PRINT N'Creating [Operation].[MemberSessions].[ix_MemberSessions_nc_nu_MemberId]...';


GO
CREATE NONCLUSTERED INDEX [ix_MemberSessions_nc_nu_MemberId]
    ON [Operation].[MemberSessions]([MemberId] ASC);


GO
PRINT N'Creating [Operation].[Members]...';


GO
CREATE TABLE [Operation].[Members] (
    [Id]                   INT             IDENTITY (1, 1) NOT NULL,
    [Username]             NVARCHAR (10)   NOT NULL,
    [Password]             NVARCHAR (10)   NOT NULL,
    [FirstName]            NVARCHAR (20)   NOT NULL,
    [LastName]             NVARCHAR (20)   NOT NULL,
    [StreetAddress]        NVARCHAR (100)  NULL,
    [CountryId]            TINYINT         NOT NULL,
    [PhoneNumber]          NVARCHAR (20)   NULL,
    [EmailAddress]         NVARCHAR (100)  NOT NULL,
    [GenderId]             TINYINT         NOT NULL,
    [BirthDate]            DATE            NOT NULL,
    [SexualPreferenceId]   TINYINT         NULL,
    [MaritalStatusId]      TINYINT         NULL,
    [Picture]              VARBINARY (MAX) NULL,
    [RegistrationDateTime] DATETIME2 (0)   NOT NULL,
    [ReferringMemberId]    INT             NULL,
    CONSTRAINT [pk_Members_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[EventTypes]...';


GO
CREATE TABLE [Lists].[EventTypes] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_EventTypes_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[InvitationStatuses]...';


GO
CREATE TABLE [Lists].[InvitationStatuses] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_InvitationStatuses_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[SessionEndReasons]...';


GO
CREATE TABLE [Lists].[SessionEndReasons] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_SessionEndReasons_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[MaritalStatuses]...';


GO
CREATE TABLE [Lists].[MaritalStatuses] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_MaritalStatuses_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[Genders]...';


GO
CREATE TABLE [Lists].[Genders] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_Genders_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[Countries]...';


GO
CREATE TABLE [Lists].[Countries] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_Countries_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[ProductStatuses]...';


GO
CREATE TABLE [Lists].[ProductStatuses] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_ProductStatuses_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Lists].[OrderStatuses]...';


GO
CREATE TABLE [Lists].[OrderStatuses] (
    [Id]   TINYINT       NOT NULL,
    [Name] NVARCHAR (50) NOT NULL,
    CONSTRAINT [pk_OrderStatuses_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Billing].[Payments]...';


GO
CREATE TABLE [Billing].[Payments] (
    [Id]          INT             IDENTITY (1, 1) NOT NULL,
    [MemberId]    NVARCHAR (20)   NOT NULL,
    [Amount]      DECIMAL (19, 2) NOT NULL,
    [DateAndTime] DATETIME2 (0)   NOT NULL,
    CONSTRAINT [pk_Payments_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Billing].[Transactions]...';


GO
CREATE TABLE [Billing].[Transactions] (
    [TransactionId]       INT           IDENTITY (1, 1) NOT NULL,
    [AccountId]           INT           NOT NULL,
    [TransactionDateTime] DATETIME2 (0) NOT NULL,
    [Amount]              MONEY         NOT NULL,
    CONSTRAINT [pk_Transactions_nc_TransactionId] PRIMARY KEY NONCLUSTERED ([TransactionId] ASC)
);


GO
PRINT N'Creating [Billing].[Transactions].[ix_Transactions_AccountId#TransactionDateTime]...';


GO
CREATE CLUSTERED INDEX [ix_Transactions_AccountId#TransactionDateTime]
    ON [Billing].[Transactions]([AccountId] ASC, [TransactionDateTime] ASC);


GO
PRINT N'Creating [Sales].[OrderProducts]...';


GO
CREATE TABLE [Sales].[OrderProducts] (
    [Id]        INT   IDENTITY (1, 1) NOT NULL,
    [OrderId]   INT   NOT NULL,
    [ProductId] INT   NOT NULL,
    [Quantity]  INT   NOT NULL,
    [UnitPrice] MONEY NOT NULL,
    CONSTRAINT [pk_OrderProducts_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Sales].[Orders]...';


GO
CREATE TABLE [Sales].[Orders] (
    [Id]            INT             IDENTITY (1, 1) NOT NULL,
    [CustomerId]    INT             NOT NULL,
    [DateAndTime]   DATETIME2 (0)   NOT NULL,
    [OrderStatusId] TINYINT         NOT NULL,
    [Comments]      NVARCHAR (1000) NULL,
    CONSTRAINT [pk_Orders_nc_Id] PRIMARY KEY NONCLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Sales].[Orders].[ix_Orders_nc_nu_CustomerId]...';


GO
CREATE NONCLUSTERED INDEX [ix_Orders_nc_nu_CustomerId]
    ON [Sales].[Orders]([CustomerId] ASC);


GO
PRINT N'Creating [Marketing].[Customers]...';


GO
CREATE TABLE [Marketing].[Customers] (
    [Id]               INT             IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (50)   NOT NULL,
    [Phone]            NVARCHAR (20)   NULL,
    [BirthDate]        DATE            NULL,
    [SourceURL]        NVARCHAR (1000) NULL,
    [Country]          NCHAR (2)       NOT NULL,
    [LastPurchaseDate] DATE            NULL,
    CONSTRAINT [pk_Customers_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Marketing].[Customers].[ix_Customers_nc_nu_Country]...';


GO
CREATE NONCLUSTERED INDEX [ix_Customers_nc_nu_Country]
    ON [Marketing].[Customers]([Country] ASC);


GO
PRINT N'Creating [Marketing].[Customers].[ix_Customers_nc_nu_SourceURL]...';


GO
CREATE NONCLUSTERED INDEX [ix_Customers_nc_nu_SourceURL]
    ON [Marketing].[Customers]([SourceURL] ASC);


GO
PRINT N'Creating [Inventory].[Products]...';


GO
CREATE TABLE [Inventory].[Products] (
    [Id]              INT           IDENTITY (1, 1) NOT NULL,
    [Name]            NVARCHAR (50) NOT NULL,
    [ListPrice]       MONEY         NOT NULL,
    [ProductStatusId] TINYINT       NOT NULL,
    CONSTRAINT [pk_Products_c_Id] PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [Inventory].[Products].[ix_Products_nc_nu_ProductStatusId]...';


GO
CREATE NONCLUSTERED INDEX [ix_Products_nc_nu_ProductStatusId]
    ON [Inventory].[Products]([ProductStatusId] ASC, [ListPrice] DESC);


GO
PRINT N'Creating unnamed constraint on [dbo].[FilterColumns]...';


GO
ALTER TABLE [dbo].[FilterColumns]
    ADD FOREIGN KEY ([ColumnFilterTableAlias]) REFERENCES [dbo].[FilterTables] ([FilterTableAlias]) ON UPDATE CASCADE;


GO
PRINT N'Creating [Operation].[fk_SessionEvents_EventTypeId_EventTypes_Id]...';


GO
ALTER TABLE [Operation].[SessionEvents]
    ADD CONSTRAINT [fk_SessionEvents_EventTypeId_EventTypes_Id] FOREIGN KEY ([EventTypeId]) REFERENCES [Lists].[EventTypes] ([Id]);


GO
PRINT N'Creating [Operation].[fk_SessionEvents_MemberId_Members_Id]...';


GO
ALTER TABLE [Operation].[SessionEvents]
    ADD CONSTRAINT [fk_SessionEvents_MemberId_Members_Id] FOREIGN KEY ([MemberId]) REFERENCES [Operation].[Members] ([Id]);


GO
PRINT N'Creating [Operation].[fk_SessionEvents_SessionId_MemberSessions_Id]...';


GO
ALTER TABLE [Operation].[SessionEvents]
    ADD CONSTRAINT [fk_SessionEvents_SessionId_MemberSessions_Id] FOREIGN KEY ([SessionId]) REFERENCES [Operation].[MemberSessions] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Invitations_ReceivingMemberId_Members_Id]...';


GO
ALTER TABLE [Operation].[Invitations]
    ADD CONSTRAINT [fk_Invitations_ReceivingMemberId_Members_Id] FOREIGN KEY ([ReceivingMemberId]) REFERENCES [Operation].[Members] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Invitations_RequestingSessionId_MemberSessions_Id]...';


GO
ALTER TABLE [Operation].[Invitations]
    ADD CONSTRAINT [fk_Invitations_RequestingSessionId_MemberSessions_Id] FOREIGN KEY ([RequestingSessionId]) REFERENCES [Operation].[MemberSessions] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Invitations_StatusId_InvitationStatuses_Id]...';


GO
ALTER TABLE [Operation].[Invitations]
    ADD CONSTRAINT [fk_Invitations_StatusId_InvitationStatuses_Id] FOREIGN KEY ([StatusId]) REFERENCES [Lists].[InvitationStatuses] ([Id]);


GO
PRINT N'Creating [Operation].[fk_MemberSessions_EndReasonId_SessionEndReasons_Id]...';


GO
ALTER TABLE [Operation].[MemberSessions]
    ADD CONSTRAINT [fk_MemberSessions_EndReasonId_SessionEndReasons_Id] FOREIGN KEY ([EndReasonId]) REFERENCES [Lists].[SessionEndReasons] ([Id]);


GO
PRINT N'Creating [Operation].[fk_MemberSessions_MemberId_Members_Id]...';


GO
ALTER TABLE [Operation].[MemberSessions]
    ADD CONSTRAINT [fk_MemberSessions_MemberId_Members_Id] FOREIGN KEY ([MemberId]) REFERENCES [Operation].[Members] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Members_CountryId_Countries_Id]...';


GO
ALTER TABLE [Operation].[Members]
    ADD CONSTRAINT [fk_Members_CountryId_Countries_Id] FOREIGN KEY ([CountryId]) REFERENCES [Lists].[Countries] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Members_GenderId_Genders_Id]...';


GO
ALTER TABLE [Operation].[Members]
    ADD CONSTRAINT [fk_Members_GenderId_Genders_Id] FOREIGN KEY ([GenderId]) REFERENCES [Lists].[Genders] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Members_MaritalStatusId_MaritalStatuses_Id]...';


GO
ALTER TABLE [Operation].[Members]
    ADD CONSTRAINT [fk_Members_MaritalStatusId_MaritalStatuses_Id] FOREIGN KEY ([MaritalStatusId]) REFERENCES [Lists].[MaritalStatuses] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Members_SexualPreferenceId_Genders_Id]...';


GO
ALTER TABLE [Operation].[Members]
    ADD CONSTRAINT [fk_Members_SexualPreferenceId_Genders_Id] FOREIGN KEY ([SexualPreferenceId]) REFERENCES [Lists].[Genders] ([Id]);


GO
PRINT N'Creating [Operation].[fk_Members_ReferringMemberId_Members_Id]...';


GO
ALTER TABLE [Operation].[Members]
    ADD CONSTRAINT [fk_Members_ReferringMemberId_Members_Id] FOREIGN KEY ([ReferringMemberId]) REFERENCES [Operation].[Members] ([Id]);


GO
PRINT N'Creating [Sales].[fk_OrderProducts_OrderId_Orders_Id]...';


GO
ALTER TABLE [Sales].[OrderProducts]
    ADD CONSTRAINT [fk_OrderProducts_OrderId_Orders_Id] FOREIGN KEY ([OrderId]) REFERENCES [Sales].[Orders] ([Id]);


GO
PRINT N'Creating [Sales].[fk_OrderProducts_ProductId_Products_Id]...';


GO
ALTER TABLE [Sales].[OrderProducts]
    ADD CONSTRAINT [fk_OrderProducts_ProductId_Products_Id] FOREIGN KEY ([ProductId]) REFERENCES [Inventory].[Products] ([Id]);


GO
PRINT N'Creating [Sales].[fk_Orders_CustomerId_Customers_Id]...';


GO
ALTER TABLE [Sales].[Orders]
    ADD CONSTRAINT [fk_Orders_CustomerId_Customers_Id] FOREIGN KEY ([CustomerId]) REFERENCES [Marketing].[Customers] ([Id]);


GO
PRINT N'Creating [Sales].[fk_Orders_OrderStatusId_OrderStatuses_Id]...';


GO
ALTER TABLE [Sales].[Orders]
    ADD CONSTRAINT [fk_Orders_OrderStatusId_OrderStatuses_Id] FOREIGN KEY ([OrderStatusId]) REFERENCES [Lists].[OrderStatuses] ([Id]);


GO
PRINT N'Creating [Inventory].[fk_Products_ProductStatusId_ProductStatuses_Id]...';


GO
ALTER TABLE [Inventory].[Products]
    ADD CONSTRAINT [fk_Products_ProductStatusId_ProductStatuses_Id] FOREIGN KEY ([ProductStatusId]) REFERENCES [Lists].[ProductStatuses] ([Id]);


GO
PRINT N'Creating [dbo].[VW_Invitations]...';


GO
CREATE VIEW dbo.VW_Invitations
AS
SELECT        Operation.Invitations.Id AS InvitationId, Operation.Invitations.CreationDateTime AS InvitationDateTime, Operation.Invitations.ResponseDateTime, Operation.Invitations.ReceivingMemberId, 
                         Operation.Members.Username AS ReceivingUsername, Operation.Members.EmailAddress AS ReceivingEmail, Operation.MemberSessions.MemberId AS RequestingMemberId, Members_1.Username AS RequestingUsername, 
                         Members_1.EmailAddress AS RequestingEmail, Lists.InvitationStatuses.Name AS InvitationStatus
FROM            Lists.InvitationStatuses INNER JOIN
                         Operation.Invitations ON Lists.InvitationStatuses.Id = Operation.Invitations.StatusId INNER JOIN
                         Operation.Members ON Operation.Invitations.ReceivingMemberId = Operation.Members.Id INNER JOIN
                         Operation.MemberSessions ON Operation.Invitations.RequestingSessionId = Operation.MemberSessions.Id INNER JOIN
                         Operation.Members AS Members_1 ON Operation.MemberSessions.MemberId = Members_1.Id
GO
PRINT N'Creating [dbo].[VW_SessionEvents]...';


GO
CREATE VIEW dbo.VW_SessionEvents
AS
SELECT        Operation.SessionEvents.Id AS SessionEventId, Operation.SessionEvents.DateAndTime, Operation.SessionEvents.URL, Operation.MemberSessions.LoginDateTime, Operation.MemberSessions.EndDateTime, 
                         Lists.EventTypes.Name AS EventTypeName, Operation.SessionEvents.EventTypeId, Operation.MemberSessions.MemberId, Operation.Members.Username, Operation.Members.EmailAddress
FROM            Operation.SessionEvents INNER JOIN
                         Operation.MemberSessions ON Operation.SessionEvents.SessionId = Operation.MemberSessions.Id INNER JOIN
                         Lists.EventTypes ON Operation.SessionEvents.EventTypeId = Lists.EventTypes.Id INNER JOIN
                         Operation.Members ON Operation.SessionEvents.MemberId = Operation.Members.Id AND Operation.MemberSessions.MemberId = Operation.Members.Id AND Operation.MemberSessions.MemberId = Operation.Members.Id
GO
PRINT N'Creating [dbo].[VW_Members]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
CREATE VIEW [dbo].[VW_Members]
AS
SELECT
	[Id], [Username], [FirstName], [LastName], [StreetAddress], [CountryId], [EmailAddress], [GenderId], [BirthDate], [SexualPreferenceId], [MaritalStatusId], [RegistrationDateTime]
FROM Operation.Members
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[FilterParseTVPParameters]...';


GO
/*
	Fully Parameterized Search Query
	--------------------------------
	
	Copyright Eitan Blumin (c) 2018; email: eitan@madeiradata.com
	You may use the contents of this SQL script or parts of it, modified or otherwise
	for any purpose that you wish (including commercial).
	Under the single condition that you include in the script
	this comment block unchanged, and the URL to the original source, which is:
	http://www.eitanblumin.com/

--------------------------------
Example Usage:
--------------------------------
DECLARE @SQL NVARCHAR(MAX), @TVPParams dbo.UDT_FilterParameters, @TVPOrdering dbo.UDT_ColumnOrder

INSERT INTO @TVPParams
(ColumnID, OperatorID, [Value])
VALUES
(1, 11, N'2'),
(2, 11, N'DB1'),
(2, 11, N'DB2'),
(3, 6, N'2018-11-11 15:00')

INSERT INTO @TVPOrdering
(ColumnOrdinal, ColumnID, IsAscending)
VALUES
(1, 11, 1),
(2, 5, 1)

EXEC dbo.FilterParseTVPParameters @SourceTableAlias = 'Members', @TVPParams = @TVPParams, @TVPOrdering = @TVPOrdering, @ParsedSQL = @SQL OUTPUT

PRINT @SQL

EXEC sp_executesql @SQL, N'@TVPParams dbo.UDT_FilterParametersas READONLY', @TVPParams

*/
CREATE PROCEDURE [dbo].[FilterParseTVPParameters]
	@SourceTableAlias	SYSNAME,				-- the alias of the table from FilterTables to be used as the source
	@TVPParams			dbo.UDT_FilterParameters READONLY,	-- the TVP definition of the parameter values
	@TVPOrdering		dbo.UDT_ColumnOrder READONLY,		-- the TVP definition of the column ordering (optional)
	@PageSize			INT = 9999,
	@Offset				INT = 1,
	@ParsedSQL			NVARCHAR(MAX) OUTPUT,	-- returns the parsed SQL command to be used for sp_executesql.
	@ForceRecompile		BIT = 1,				-- forces the query to do parameter sniffing using OPTION(RECOMPILE)
	@RowNumberColumn	SYSNAME = 'RowNumber',	-- you can optionally change the name of the RowNumber column used for pagination (to avoid collision with existing columns)
	@RunCommand			BIT = 0					-- determines whether to run the parsed command (otherwise just output the command w/o running it)
--WITH NATIVE_COMPILATION, SCHEMABINDING
AS BEGIN
--ATOMIC WITH(TRANSACTION ISOLATION LEVEL = SNAPSHOT, LANGUAGE = N'us_english')
SET XACT_ABORT ON;
SET ARITHABORT ON;
SET NOCOUNT ON;
-- Init variables
DECLARE 
	@SourceTableName SYSNAME,
	@PageOrdering NVARCHAR(MAX),
	@FilterString NVARCHAR(MAX), 
	@FilterTablesString NVARCHAR(MAX), 
	@FilterParamInit NVARCHAR(4000)

SET @FilterString = N'';
SET @FilterTablesString = N'';

SELECT @SourceTableName = FilterTableName
FROM FilterTables
WHERE FilterTableAlias = @SourceTableAlias

IF @SourceTableName IS NULL
BEGIN
	RAISERROR(N'Table %s was not found in definitions',16,1,@SourceTableAlias);
	RETURN -1;
END

-- Prepare the ORDER BY clause (save in indexed temp table to ensure sort which might be distorted by the JOIN otherwise)
DECLARE @SortedColumns AS TABLE (ColumnRealName SYSNAME, IsAscending BIT, ColumnIndex BIGINT PRIMARY KEY);

INSERT INTO @SortedColumns
SELECT
	FilterColumns.ColumnRealName, Q.IsAscending, Q.ColumnIndex
FROM
(
	SELECT
		ColumnIndex			= ColumnOrdinal,
		OrderingColumnID	= ColumnID,
		IsAscending			= IsAscending
	FROM
		@TVPOrdering
) AS Q
JOIN
	FilterColumns
ON
	Q.OrderingColumnID = FilterColumns.ColumnID
INNER JOIN
	FilterTables
ON
	FilterColumns.ColumnFilterTableAlias = FilterTables.FilterTableAlias
WHERE
	FilterColumns.ColumnSortEnabled = 1
AND FilterColumns.ColumnFilterTableAlias = @SourceTableAlias

SELECT
	@PageOrdering = ISNULL(@PageOrdering + N', ',N'') + ColumnRealName + N' ' + CASE WHEN IsAscending = 1 THEN 'ASC' ELSE 'DESC' END
FROM @SortedColumns

IF @PageOrdering IS NULL
	SET @PageOrdering = '(SELECT NULL)'

-- Parse filtering
SELECT
	@FilterParamInit = ISNULL(@FilterParamInit, '') + N'
DECLARE @p' + ParamIndex +

		-- If Operator is multi-valued, declare local variable as a temporary table, to ensure strong-typing
		CASE WHEN FilterOperators.IsMultiValue = 1 THEN
			N' TABLE ([Value] ' + FilterColumns.ColumnSqlDataType + N');
			INSERT INTO @p' + ParamIndex + N'
			SELECT CONVERT(' + FilterColumns.ColumnSqlDataType + N', [value])
			FROM @TVPParams
			WHERE ParamIndex = ' + ParamIndex + N';
			'
		
		-- If Operator is single-valued, declare the local variable as a regular variable, to ensure strong-typing.
		ELSE
			N' ' + FilterColumns.ColumnSqlDataType + N';
			SELECT @p' + ParamIndex + N' = CONVERT(' + FilterColumns.ColumnSqlDataType + N', [value]) FROM @TVPParams WHERE ParamIndex = ' + ParamIndex + N';
			'
		END
		,
	-- Parse the Operator template by replacing the placeholders
	@FilterString = @FilterString + N'
	AND ' + REPLACE(
			REPLACE(
			FilterOperators.OperatorTemplate
			, '{Column}',FilterColumns.ColumnRealName)
			, '{Parameter}', '@p' + ParamIndex)
FROM
	(
		SELECT DISTINCT
			ParamIndex			= CONVERT(nvarchar(max), ParamIndex) COLLATE database_default,
			FilterColumnID		= ColumnId,
			FilterOperatorID	= OperatorID
		FROM
			@TVPParams
	) AS ParamValues
JOIN
	FilterColumns
ON
	ParamValues.FilterColumnID = FilterColumns.ColumnID
JOIN
	FilterOperators
ON
	ParamValues.FilterOperatorID = FilterOperators.OperatorID
INNER JOIN
	FilterTables
ON
	FilterColumns.ColumnFilterTableAlias = FilterTables.FilterTableAlias
WHERE
	FilterColumns.ColumnFilterTableAlias = @SourceTableAlias

-- Construct the final parsed SQL command
SET @ParsedSQL = ISNULL(@FilterParamInit, '') + N'
SELECT * FROM
(SELECT Main.*, ' + QUOTENAME(@RowNumberColumn) + N' = ROW_NUMBER() OVER( ORDER BY ' + @PageOrdering + N' )
FROM ' + @SourceTableName + N' AS Main
WHERE 1=1 ' + ISNULL(@FilterString,'') + N'
) AS Q
WHERE '+ QUOTENAME(@RowNumberColumn) + N' BETWEEN ' + CONVERT(nvarchar(50), @Offset) + N' AND ' + CONVERT(nvarchar(50), @Offset + @PageSize - 1) + N'
ORDER BY ' + QUOTENAME(@RowNumberColumn);

-- Optionally add RECOMPILE hint
IF @ForceRecompile = 1
	SET @ParsedSQL = @ParsedSQL + N'
OPTION (RECOMPILE)'

-- Optionally run the command
IF @RunCommand = 1
	EXEC sp_executesql @ParsedSQL, N'@TVPParams dbo.UDT_FilterParameters READONLY', @TVPParams
END
GO
PRINT N'Creating [dbo].[FilterParseJsonParameters]...';


GO
/*
	Fully Parameterized Search Query
	--------------------------------
	
	Copyright Eitan Blumin (c) 2018; email: eitan@madeiradata.com
	You may use the contents of this SQL script or parts of it, modified or otherwise
	for any purpose that you wish (including commercial).
	Under the single condition that you include in the script
	this comment block unchanged, and the URL to the original source, which is:
	http://www.eitanblumin.com/

--------------------------------
Example Usage:
--------------------------------
DECLARE @SQL NVARCHAR(MAX), @JsonParams NVARCHAR(MAX) = N'[
	{"ColumnID": "1", "OperatorID": "11", "Value": [ "2" ]},
	{"ColumnID": "2", "OperatorID": "11", "Value": [ "DB1", "DB2" ] },
	{"ColumnID": "3", "OperatorID": "6",  "Value": [ "2018-11-11 15:00" ] }
]', @JsonOrdering NVARCHAR(MAX) = N'[
	{"ColumnId": "11", "Ascending": "1"},
	{"ColumnId": "5",  "Ascending": "1"}
]'

EXEC dbo.FilterParseJsonParameters @SourceTableAlias = 'Members', @JsonParams = @JsonParams, @JsonOrdering = @JsonOrdering, @ParsedSQL = @SQL OUTPUT

PRINT @SQL

*/
CREATE PROCEDURE [dbo].[FilterParseJsonParameters]
	@SourceTableAlias	SYSNAME,				-- the alias of the table from FilterTables to be used as the source
	@JsonParams			NVARCHAR(MAX),			-- the JSON definition of the parameter values
	@JsonOrdering		NVARCHAR(MAX) = NULL,	-- the JSON definition of the column ordering (optional)
	@PageSize			INT = 9999,
	@Offset				INT = 1,
	@ParsedSQL			NVARCHAR(MAX) OUTPUT,	-- returns the parsed SQL command to be used for sp_executesql.
	@ForceRecompile		BIT = 1,				-- forces the query to do parameter sniffing using OPTION(RECOMPILE)
	@RowNumberColumn	SYSNAME = 'RowNumber',	-- you can optionally change the name of the RowNumber column used for pagination (to avoid collision with existing columns)
	@RunCommand			BIT = 1					-- determines whether to run the parsed command (otherwise just output the command w/o running it)
AS
SET XACT_ABORT ON;
SET ARITHABORT ON;
SET NOCOUNT ON;
-- Init variables
DECLARE @TVPParams dbo.UDT_FilterParameters, @TVPOrdering dbo.UDT_ColumnOrder

-- Parse the JSON into a relational structures

INSERT INTO @TVPOrdering
SELECT
	ColumnIndex			= [key],
	OrderingColumnID	= CONVERT(int, JSON_VALUE([value], '$.ColumnId')),
	IsAscending			= CONVERT(bit, JSON_VALUE([value], '$.Ascending'))
FROM
	OPENJSON(@JsonOrdering, '$')

INSERT INTO @TVPParams
SELECT
	ParamIndex			= P.[key],
	FilterColumnID		= CONVERT(int, JSON_VALUE(P.[value], '$.ColumnID')),
	FilterOperatorID	= CONVERT(int, JSON_VALUE(P.[value], '$.OperatorID')),
	Val					= V.[value]
FROM
	OPENJSON(@JsonParams, '$') as P
CROSS APPLY OPENJSON(JSON_QUERY(P.[value], '$.Value'), '$') AS V

-- Run the actual procedure with table-valued-parameters
EXEC dbo.FilterParseTVPParameters @SourceTableAlias, @TVPParams, @TVPOrdering, @PageSize, @Offset, @ParsedSQL OUTPUT, @ForceRecompile, @RowNumberColumn, @RunCommand
GO
PRINT N'Creating [Operation].[usp_GetInvitationsByStatus]...';


GO


CREATE PROCEDURE
	Operation.usp_GetInvitationsByStatus
(
	@inStatusId AS TINYINT
)
AS

SELECT TOP (10)
	Id ,
	RequestingSessionId ,
	ReceivingMemberId ,
	CreationDateTime ,
	StatusId ,
	ResponseDateTime
FROM
	Operation.Invitations
WHERE
	StatusId = @inStatusId
ORDER BY
	CreationDateTime ASC;
GO
PRINT N'Creating [Operation].[usp_SendFakeInvitations]...';


GO


-- Create stored procedures

CREATE PROCEDURE
	Operation.usp_SendFakeInvitations
AS

DECLARE
	@tblEligibleMembers
TABLE
(
	MemberId		INT				NOT NULL ,
	BillingAmount	DECIMAL(19,2)	NOT NULL
);

DECLARE
	@tblPotentialCouples
TABLE
(
	RequestingMemberId	INT	NOT NULL ,
	ReceivingMemberId	INT	NOT NULL
);


-- Query 1

INSERT INTO
	@tblEligibleMembers
(
	MemberId ,
	BillingAmount
)
SELECT
	MemberId		= MemberId ,
	BillingAmount	= SUM (Amount)
FROM
	Billing.Payments
GROUP BY
	MemberId;


-- Query 2

DELETE FROM
	@tblEligibleMembers
WHERE
	BillingAmount < 6000.00;


-- Query 3

INSERT INTO
	@tblPotentialCouples
(
	RequestingMemberId ,
	ReceivingMemberId
)
SELECT
	RequestingMemberId	= RequestingMembers.Id ,
	ReceivingMemberId	= ReceivingMembers.Id
FROM
	(
		SELECT TOP (200)
			Id ,
			CountryId ,
			BirthDate ,
			SexualPreferenceId
		FROM
			Operation.Members
		ORDER BY
			NEWID () ASC
	)
	AS
		RequestingMembers
CROSS JOIN
	(
		SELECT TOP (200)
			Id ,
			CountryId ,
			GenderId ,
			BirthDate
		FROM
			Operation.Members
		WHERE
			MaritalStatusId != 2
		OR
			MaritalStatusId IS NULL
		ORDER BY
			NEWID () ASC
	)
	AS
		ReceivingMembers
WHERE
	RequestingMembers.CountryId = ReceivingMembers.CountryId
AND
	(RequestingMembers.SexualPreferenceId = ReceivingMembers.GenderId OR RequestingMembers.SexualPreferenceId IS NULL)
AND
	ABS (DATEDIFF (YEAR , RequestingMembers.BirthDate , ReceivingMembers.BirthDate)) <= 5
AND
	RequestingMembers.Id != ReceivingMembers.Id;


-- Query 4

DELETE FROM
	@tblPotentialCouples
WHERE
	RequestingMemberId NOT IN
		(
			SELECT
				MemberId
			FROM
				@tblEligibleMembers
		);


-- Query 5

INSERT INTO
	Operation.Invitations
(
	RequestingSessionId ,
	ReceivingMemberId ,
	CreationDateTime ,
	StatusId ,
	ResponseDateTime
)
SELECT
	RequestingSessionId	= RequestingSessions.Id ,
	ReceivingMemberId	= PotentialCouples.ReceivingMemberId ,
	CreationDateTime	= DATEADD (SECOND , 5 , RequestingSessions.LoginDateTime) ,
	StatusId			= 1 ,	-- Sent
	ResponseDateTime	= NULL
FROM
	@tblPotentialCouples AS PotentialCouples
CROSS APPLY
	(
		SELECT TOP (1)
			MemberSessions.Id ,
			MemberSessions.LoginDateTime
		FROM
			Operation.MemberSessions AS MemberSessions
		WHERE
			MemberSessions.MemberId = PotentialCouples.RequestingMemberId
		ORDER BY
			MemberSessions.LoginDateTime DESC
	)
	AS
		RequestingSessions;
GO
PRINT N'Creating Permission...';


GO
GRANT CONNECT TO [demoUser];


GO
PRINT N'Creating Permission...';


GO
GRANT SELECT TO [demoUser];


GO
PRINT N'Creating Permission...';


GO
GRANT EXECUTE TO [demoUser];


GO
PRINT N'Creating [dbo].[VW_Invitations].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 2, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_Invitations';


GO
PRINT N'Creating [dbo].[VW_Invitations].[MS_DiagramPane2]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane2', @value = N' 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_Invitations';


GO
PRINT N'Creating [dbo].[VW_Invitations].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "InvitationStatuses (Lists)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 102
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Invitations (Operation)"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 136
               Right = 443
            End
            DisplayFlags = 280
            TopColumn = 2
         End
         Begin Table = "Members (Operation)"
            Begin Extent = 
               Top = 6
               Left = 481
               Bottom = 136
               Right = 684
            End
            DisplayFlags = 280
            TopColumn = 6
         End
         Begin Table = "MemberSessions (Operation)"
            Begin Extent = 
               Top = 6
               Left = 722
               Bottom = 136
               Right = 892
            End
            DisplayFlags = 280
            TopColumn = 1
         End
         Begin Table = "Members_1"
            Begin Extent = 
               Top = 102
               Left = 38
               Bottom = 232
               Right = 241
            End
            DisplayFlags = 280
            TopColumn = 5
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter =', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_Invitations';


GO
PRINT N'Creating [dbo].[VW_SessionEvents].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_SessionEvents';


GO
PRINT N'Creating [dbo].[VW_SessionEvents].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[40] 4[20] 2[20] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "SessionEvents (Operation)"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 136
               Right = 208
            End
            DisplayFlags = 280
            TopColumn = 2
         End
         Begin Table = "MemberSessions (Operation)"
            Begin Extent = 
               Top = 6
               Left = 246
               Bottom = 136
               Right = 416
            End
            DisplayFlags = 280
            TopColumn = 1
         End
         Begin Table = "EventTypes (Lists)"
            Begin Extent = 
               Top = 6
               Left = 454
               Bottom = 102
               Right = 624
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "Members (Operation)"
            Begin Extent = 
               Top = 6
               Left = 662
               Bottom = 136
               Right = 865
            End
            DisplayFlags = 280
            TopColumn = 11
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 1440
         Alias = 900
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'VW_SessionEvents';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

-- Populate Sample data for Dynamic Filters

INSERT INTO dbo.FilterTables
(FilterTableAlias,FilterTableName)
SELECT
 'Members','dbo.VW_Members'
WHERE NOT EXISTS (SELECT NULL FROM dbo.FilterTables)

RAISERROR(N'Populated FilterTables with %d rows',0,1,@@ROWCOUNT) WITH NOWAIT;

INSERT INTO dbo.FilterOperators
SELECT *
FROM (
VALUES
 (1, 0, 'Contains', '{Column} LIKE ''%'' + {Parameter} + ''%''')
,(2, 0, 'Not Contains', '{Column} NOT LIKE ''%'' + {Parameter} + ''%''')
,(3, 0, 'Starts With', '{Column} LIKE {Parameter} + ''%''')
,(4, 0, 'Ends With', '{Column} LIKE ''%'' + {Parameter}')
,(5, 0, 'Greater Than', '{Column} > {Parameter}')
,(6, 0, 'Greater Than or Equal', '{Column} >= {Parameter}')
,(7, 0, 'Less Than', '{Column} < {Parameter}')
,(8, 0, 'Less Than or Equal', '{Column} <= {Parameter}')
,(9, 0, 'Equals', '{Column} = {Parameter}')
,(10, 0, 'Not Equals', '{Column} <> {Parameter}')
,(11, 1, 'In', '{Column} IN (SELECT Value FROM {Parameter})')
,(12, 1, 'Not In', '{Column} NOT IN (SELECT Value FROM {Parameter})')
) AS v(OperatorID, IsMultiValue, OperatorName, OperatorTemplate)
WHERE NOT EXISTS (SELECT NULL FROM dbo.FilterOperators)

RAISERROR(N'Populated FilterOperators with %d rows',0,1,@@ROWCOUNT) WITH NOWAIT;

INSERT INTO dbo.FilterColumns
(ColumnFilterTableAlias,ColumnRealName,ColumnSqlDataType,ColumnDisplayName,ColumnSortEnabled,ColumnSupportedFilterOperators,QueryForAvailableValues)
SELECT *
FROM (
VALUES
 ('Members', 'Id', 'int', 'Member Id', 1, NULL, NULL)
,('Members', 'Username', 'nvarchar(10)', 'User Name', 1, '1, 2, 3, 4, 9, 10', NULL)
,('Members', 'FirstName', 'nvarchar(20)', 'First Name', 1, '1, 2, 3, 4, 9, 10', NULL)
,('Members', 'LastName', 'nvarchar(20)', 'Last Name', 1, '1, 2, 3, 4, 9, 10', NULL)
,('Members', 'CountryId', 'tinyint', 'Country', 1, '9,10,11,12', 'SELECT Id AS [value], Name AS [label], NULL AS [group] FROM Lists.Countries ORDER BY 2')
,('Members', 'GenderID', 'tinyint', 'Gender', 1, '9,10,11', 'SELECT Id AS [value], Name AS [label], NULL AS [group] FROM Lists.Genders ORDER BY 2')
,('Members', 'SexualPreferenceId', 'tinyint', 'Sexual Preference', 1, '9,10,11', 'SELECT Id AS [value], Name AS [label], NULL AS [group] FROM Lists.Genders ORDER BY 2')
,('Members', 'BirthDate', 'date', 'BirthDate', 1, '5, 6, 7, 8, 9, 10', NULL)
,('Members', 'RegistrationDateTime', 'datetime', 'Registration Date and Time', 1, '5, 6, 7, 8, 9, 10', NULL)
) AS v(ColumnFilterTableAlias,ColumnRealName,ColumnSqlDataType,ColumnDisplayName,ColumnSortEnabled,ColumnSupportedFilterOperators,QueryForAvailableValues)
WHERE NOT EXISTS (SELECT NULL FROM dbo.FilterColumns)

RAISERROR(N'Populated FilterColumns with %d rows',0,1,@@ROWCOUNT) WITH NOWAIT;
GO

-- Populate other tables with sample data

IF NOT EXISTS (SELECT NULL FROM Lists.ProductStatuses)
INSERT INTO
	Lists.ProductStatuses
(
	Id ,
	Name
)
VALUES
	( 1	, N'New'		) ,
	( 2	, N'Beta'		) ,
	( 3	, N'Sale'		) ,
	( 4	, N'Obsolete'	);

IF NOT EXISTS (SELECT NULL FROM Lists.OrderStatuses)
INSERT INTO
	Lists.OrderStatuses
(
	Id ,
	Name
)
VALUES
	( 1	, N'New'				) ,
	( 2	, N'Pending Payment'	) ,
	( 3	, N'Paid'				) ,
	( 4	, N'Packed'				) ,
	( 5	, N'Shipped'			) ,
	( 6	, N'Delivered'			) ,
	( 7	, N'Closed'				) ,
	( 8	, N'Cancelled'			);

IF NOT EXISTS (SELECT NULL FROM Lists.Countries)
INSERT INTO
	Lists.Countries
(
	Id ,
	Name
)
VALUES
	( 1	, N'Israel'		) ,
	( 2	, N'USA'		) ,
	( 3	, N'England'	) ,
	( 4	, N'France'		) ,
	( 5	, N'Italy'		);

IF NOT EXISTS (SELECT NULL FROM Lists.Genders)
INSERT INTO
	Lists.Genders
(
	Id ,
	Name
)
VALUES
	( 1	, N'Male'	) ,
	( 2	, N'Female'	);

IF NOT EXISTS (SELECT NULL FROM Lists.MaritalStatuses)
INSERT INTO
	Lists.MaritalStatuses
(
	Id ,
	Name
)
VALUES
	( 1	, N'Single'		) ,
	( 2	, N'Married'	) ,
	( 3	, N'Divorced'	) ,
	( 4	, N'Widowed'	);


IF NOT EXISTS (SELECT NULL FROM Lists.SessionEndReasons)
INSERT INTO
	Lists.SessionEndReasons
(
	Id ,
	Name
)
VALUES
	( 1	, N'Logout'					) ,
	( 2	, N'Disconnection'			) ,
	( 3	, N'Inactive'				) ,
	( 4	, N'Another Session Opened'	);


IF NOT EXISTS (SELECT NULL FROM Lists.InvitationStatuses)
INSERT INTO
	Lists.InvitationStatuses
(
	Id ,
	Name
)
VALUES
	( 1	, N'Sent'		) ,
	( 2	, N'Accepted'	) ,
	( 3	, N'Denied'		) ,
	( 4	, N'Cancelled'	);


IF NOT EXISTS (SELECT NULL FROM Lists.EventTypes)
INSERT INTO
	Lists.EventTypes
(
	Id ,
	Name
)
VALUES
	( 1	, N'Click'		) ,
	( 2	, N'Mouse Move'	) ,
	( 3	, N'Refresh'	) ,
	( 4	, N'Open'		) ,
	( 5	, N'Close'		);


	
IF NOT EXISTS (SELECT NULL FROM Marketing.Customers)
INSERT INTO
	Marketing.Customers WITH (TABLOCK)
(
	Name ,
	Phone ,
	BirthDate ,
	SourceURL ,
	Country ,
	LastPurchaseDate
)
SELECT TOP (100000)
	Name				= N'Customer #' + CAST (ROW_NUMBER () OVER (ORDER BY (SELECT NULL) ASC) AS NVARCHAR(50)) ,
	Phone				=	CASE
								WHEN ABS (CHECKSUM (NEWID ())) % 100 <= 70
									THEN LEFT (CAST (NEWID () AS NVARCHAR(MAX)) , 20)
								ELSE
									NULL
							END ,
	BirthDate			=	CASE
								WHEN ABS (CHECKSUM (NEWID ())) % 100 <= 70
									THEN DATEADD (DAY , - ABS (CHECKSUM (NEWID ())) % (365 * 60) - (365 * 20) , SYSDATETIME ())
								ELSE
									NULL
							END ,
	SourceURL			=	CASE
								WHEN ABS (CHECKSUM (NEWID ())) % 100 <= 80
									THEN N'http://www.abc.com/' + CAST (NEWID () AS NVARCHAR(1000))
								ELSE
									NULL
							END ,
	Country				=	CASE
								WHEN
									RandomNumbers.RandomNumber BETWEEN 1 AND 40
								THEN
									N'US'
								WHEN
									RandomNumbers.RandomNumber BETWEEN 41 AND 70
								THEN
									N'CN'
								WHEN
									RandomNumbers.RandomNumber BETWEEN 71 AND 99
								THEN
									N'UK'
								WHEN
									RandomNumbers.RandomNumber = 100
								THEN
									Countries.Country
							END ,
	LastPurchaseDate	= DATEADD (DAY , - (ABS (CHECKSUM (NEWID ())) % (365)) , SYSDATETIME ())
FROM
	sys.all_columns
CROSS JOIN
	(
		VALUES
			(N'AF') ,
			(N'BE') ,
			(N'CL') ,
			(N'DK') ,
			(N'EG') ,
			(N'FR') ,
			(N'GR') ,
			(N'IL') ,
			(N'JP') ,
			(N'MT') ,
			(N'NO') ,
			(N'PT') ,
			(N'SE') ,
			(N'TR') ,
			(N'VE')
	)
	AS
		Countries (Country)
CROSS JOIN
	(
		SELECT
			RandomNumber = ABS (CHECKSUM (NEWID ())) % 100 + 1
	)
	AS
		RandomNumbers
ORDER BY
	NEWID () ASC;

IF NOT EXISTS (SELECT NULL FROM Inventory.Products)
INSERT INTO
	Inventory.Products WITH (TABLOCK)
(
	Name ,
	ListPrice ,
	ProductStatusId
)
SELECT TOP (100000)
	Name			= N'Product #' + CAST (ROW_NUMBER () OVER (ORDER BY (SELECT NULL) ASC) AS NVARCHAR(50)) ,
	UnitPrice		= CAST ((ABS (CHECKSUM (NEWID ())) % 100000 / 100.0) AS MONEY) ,
	ProductStatusId	= ABS (CHECKSUM (NEWID ())) % 4 + 1
FROM
	sys.all_columns AS T1
CROSS JOIN
	sys.all_columns AS T2;

IF NOT EXISTS (SELECT NULL FROM Sales.Orders)
INSERT INTO
	Sales.Orders WITH (TABLOCK)
(
	CustomerId ,
	DateAndTime ,
	OrderStatusId ,
	Comments
)
SELECT TOP (1000000)
	CustomerId		= Customers.Id ,
	DateAndTime		= DATEADD (MINUTE , - ABS (CHECKSUM (NEWID ())) % (60 * 24 * 365 * 5) , SYSDATETIME ()) ,
	OrderStatusId	= ABS (CHECKSUM (NEWID ())) % 8 + 1 ,
	Comments		=	CASE
							WHEN ABS (CHECKSUM (NEWID ())) % 100 <= 40
								THEN REPLICATE (N'Bla ' , ABS (CHECKSUM (NEWID ())) % 50)
							ELSE
								NULL
						END
FROM
	Marketing.Customers AS Customers
CROSS JOIN
	(
		VALUES (1) , (2) , (3) , (4) , (5) , (6) , (7) , (8) , (9) , (10)
	)
	AS
		Numbers (Number)
ORDER BY
	NEWID () ASC;

IF NOT EXISTS (SELECT NULL FROM Sales.OrderProducts)
INSERT INTO
	Sales.OrderProducts WITH (TABLOCK)
(
	OrderId ,
	ProductId ,
	Quantity ,
	UnitPrice
)
SELECT TOP (3000000)
	OrderId		= Orders.Id ,
	ProductId	= ABS (CHECKSUM (NEWID ())) % 100000 + 1 ,
	Quantity	= ABS (CHECKSUM (NEWID ())) % 10 + 1 ,
	UnitPrice	= CAST ((ABS (CHECKSUM (NEWID ())) % 100000 / 100.0) AS MONEY)
FROM
	Sales.Orders AS Orders
CROSS JOIN
	(
		VALUES (1) , (2) , (3) , (4) , (5) , (6) , (7) , (8) , (9) , (10)
	)
	AS
		Numbers (Number)
ORDER BY
	NEWID () ASC;

GO

IF NOT EXISTS (SELECT NULL FROM Operation.Members)
BEGIN

DECLARE
	@tblFirstNames
TABLE
(
	Name		NVARCHAR(20)	NOT NULL ,
	GenderId	TINYINT			NOT NULL
);

INSERT INTO
	@tblFirstNames
(
	Name ,
	GenderId
)
SELECT
	Name		= N'John' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'David' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'James' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Ron' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Bruce' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Bryan' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Gimmy' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Rick' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Paul' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Phil' ,
	GenderId	= 1

UNION ALL

SELECT
	Name		= N'Laura' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Jane' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Sara' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Lian' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Rita' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Samantha' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Suzan' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Marry' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Monica' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Julia' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Shila' ,
	GenderId	= 2

UNION ALL

SELECT
	Name		= N'Angela' ,
	GenderId	= 2;

DECLARE
	@tblLastNames
TABLE
(
	Name NVARCHAR(20) NOT NULL
);

INSERT INTO @tblLastNames
(
	Name
)
SELECT
	Name = N'Jones'

UNION ALL

SELECT
	Name = N'McDonald'

UNION ALL

SELECT
	Name = N'Simon'

UNION ALL

SELECT
	Name = N'Petty'

UNION ALL

SELECT
	Name = N'Bond'

UNION ALL

SELECT
	Name = N'Simpson'

UNION ALL

SELECT
	Name = N'Polsky'

UNION ALL

SELECT
	Name = N'Mayers'

UNION ALL

SELECT
	Name = N'Taylor'

UNION ALL

SELECT
	Name = N'Austin'

UNION ALL

SELECT
	Name = N'Ramsfeld';

INSERT INTO
	Operation.Members WITH (TABLOCK)
(
	UserName ,
	Password ,
	FirstName ,
	LastName ,
	StreetAddress ,
	CountryId ,
	PhoneNumber ,
	EmailAddress ,
	GenderId ,
	BirthDate ,
	SexualPreferenceId ,
	MaritalStatusId ,
	Picture ,
	RegistrationDateTime ,
	ReferringMemberId
)
SELECT TOP (100000)
	UserName				= REPLICATE (N'X' , ABS (CHECKSUM (NEWID ())) % 10 + 1) ,
	Password				= CAST (ROW_NUMBER () OVER (ORDER BY (SELECT NULL) ASC) AS NVARCHAR(10)) ,
	FirstName				= FirstNames.Name ,
	LastName				= LastNames.Name ,
	StreetAddress			=	CASE
									WHEN ABS (CHECKSUM (NEWID ())) % 100 < 20
										THEN NULL
									ELSE
										REPLICATE (N'X' , ABS (CHECKSUM (NEWID ())) % 100 + 1)
								END ,
	CountryId				= ABS (CHECKSUM (NEWID ())) % 5 + 1 ,
	PhoneNumber				=	CASE
									WHEN ABS (CHECKSUM (NEWID ())) % 100 < 20
										THEN NULL
									ELSE
										CAST ((ABS (CHECKSUM (NEWID ())) % 1000000000 + 100000000) AS NVARCHAR(20))
								END ,
	EmailAddress			= REPLICATE (N'x' , ABS (CHECKSUM (NEWID ())) % 10 + 1) + N'@gmail.com' ,
	GenderId				= FirstNames.GenderId ,
	BirthDate				= CAST (DATEADD (DAY , DATEDIFF (DAY , '1900-01-01' , SYSDATETIME ()) - (19 * 365) - (ABS (CHECKSUM (NEWID ())) % (30 * 365)) , '1900-01-01') AS DATE) ,
	SexualPreferenceId		=	CASE RandomValueTable.RandomValue
									WHEN 1
										THEN 1
									WHEN 2
										THEN 2
									WHEN 3
										THEN NULL
								END ,	
	MaritalStatusId			=	CASE
									WHEN ABS (CHECKSUM (NEWID ())) % 100 < 20
										THEN NULL
									ELSE
										ABS (CHECKSUM (NEWID ())) % 4 + 1
								END ,
	Picture					=	CASE
									WHEN ABS (CHECKSUM (NEWID ())) % 100 < 30
										THEN NULL
									ELSE
										CAST (REPLICATE (N'Picture' , ABS (CHECKSUM (NEWID ())) % 1000 + 1) AS VARBINARY(MAX))
								END ,
	RegistrationDateTime	= SYSDATETIME () ,
	ReferringMemberId		= NULL
FROM
	sys.all_columns
CROSS JOIN
	@tblFirstNames AS FirstNames
CROSS JOIN
	@tblLastNames AS LastNames
CROSS JOIN
	(
		SELECT
			RandomValue = ABS (CHECKSUM (NEWID ())) % 3 + 1
	)
	AS
		RandomValueTable
ORDER BY
	NEWID () ASC;


UPDATE
	Operation.Members
SET
	RegistrationDateTime	= DATEADD (SECOND , (19 * 365 * 24 * 60 * 60) + (ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , DATEADD (SECOND , 19 * 365 * 24 * 60 * 60 , CAST (BirthDate AS DATETIME2(0))) , SYSDATETIME ())) , CAST (BirthDate AS DATETIME2(0))) ,
	ReferringMemberId		=	CASE
									WHEN Id = 1
										THEN NULL
									WHEN ABS (CHECKSUM (NEWID ())) % 100 < 30
										THEN NULL
									ELSE
										ABS (CHECKSUM (NEWID ())) % (Id - 1) + 1
								END
END
GO


IF NOT EXISTS (SELECT NULL FROM Operation.MemberSessions)
BEGIN
INSERT INTO
	Operation.MemberSessions
(
	MemberId ,
	LoginDateTime ,
	EndDateTime ,
	EndReasonId
)
SELECT TOP (1000000)
	MemberId		= Members.Id ,
	LoginDateTime	= DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , Members.RegistrationDateTime , SYSDATETIME ()) , Members.RegistrationDateTime) ,
	EndDateTime		= NULL ,
	EndReasonId		= NULL
FROM
	Operation.Members AS Members
CROSS JOIN
	sys.objects
ORDER BY
	NEWID () ASC;

UPDATE
	Operation.MemberSessions
SET
	EndDateTime	= DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % (5 * 60 * 60) + 1 , LoginDateTime) ,
	EndReasonId	= ABS (CHECKSUM (NEWID ())) % 4 + 1
WHERE
	LoginDateTime < DATEADD (MINUTE , - (5 * 60) , SYSDATETIME ());
END
GO


IF NOT EXISTS (SELECT NULL FROM Operation.Invitations)
BEGIN
INSERT INTO
	Operation.Invitations WITH (TABLOCK)
(
	RequestingSessionId ,
	ReceivingMemberId ,
	CreationDateTime ,
	StatusId ,
	ResponseDateTime
)
SELECT TOP (5000000)
	RequestingSessionId	= ABS (CHECKSUM (NEWID ())) % 1000000 + 1 ,
	ReceivingMemberId	= ABS (CHECKSUM (NEWID ())) % 100000 + 1 ,
	CreationDateTime	= DATEADD (SECOND , - ABS (CHECKSUM (NEWID ())) % (365 * 24 * 60 * 60) , SYSDATETIME ()) ,
	StatusId			= ABS (CHECKSUM (NEWID ())) % 3 + 1 ,
	ResponseDateTime	= NULL
FROM
	sys.all_columns AS T1
CROSS JOIN
	sys.all_columns AS T2;

UPDATE
	Operation.Invitations
SET
	ResponseDateTime = DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , CreationDateTime , SYSDATETIME ()) , CreationDateTime)
WHERE
	StatusId != 1;	-- Sent


INSERT INTO
	Operation.Invitations WITH (TABLOCK)
(
	RequestingSessionId ,
	ReceivingMemberId ,
	CreationDateTime ,
	StatusId ,
	ResponseDateTime
)
SELECT TOP (10)
	RequestingSessionId	= ABS (CHECKSUM (NEWID ())) % 1000000 + 1 ,
	ReceivingMemberId	= ABS (CHECKSUM (NEWID ())) % 100000 + 1 ,
	CreationDateTime	= DATEADD (SECOND , - ABS (CHECKSUM (NEWID ())) % (365 * 24 * 60 * 60) , SYSDATETIME ()) ,
	StatusId			= 4 ,
	ResponseDateTime	= NULL
FROM
	sys.all_columns;
END
GO


IF NOT EXISTS (SELECT NULL FROM Billing.Payments)
BEGIN
INSERT INTO
	Billing.Payments WITH (TABLOCK)
(
	MemberId ,
	Amount ,
	DateAndTime
)
SELECT TOP (2000000)
	MemberId	= Members.Id ,
	Amount		= CAST ((ABS (CHECKSUM (NEWID ())) % 100000 / 100.0) AS DECIMAL(19,2)) ,
	DateAndTime	= DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , Members.RegistrationDateTime , SYSDATETIME ()) , Members.RegistrationDateTime)
FROM
	Operation.Members AS Members
CROSS JOIN
	sys.objects
ORDER BY
	NEWID () ASC;

INSERT INTO
	Billing.Payments WITH (TABLOCK)
(
	MemberId ,
	Amount ,
	DateAndTime
)
SELECT TOP (100000)
	MemberId	= Members.Id ,
	Amount		= CAST ((ABS (CHECKSUM (NEWID ())) % 100000 / 100.0) AS DECIMAL(19,2)) ,
	DateAndTime	= DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , Members.RegistrationDateTime , SYSDATETIME ()) , Members.RegistrationDateTime)
FROM
	Operation.Members AS Members
CROSS JOIN
	sys.all_columns AS T1
CROSS JOIN
	sys.all_columns AS T2
WHERE
	Members.Id = 54321;
END
GO


IF NOT EXISTS (SELECT NULL FROM Billing.Transactions)
BEGIN
INSERT INTO
	Billing.Transactions WITH (TABLOCK)
(
	AccountId ,
	TransactionDateTime ,
	Amount
)
SELECT TOP (1000000)
	AccountId			= ABS (CHECKSUM (NEWID ())) % 50000 + 1 ,
	TransactionDateTime	= DATEADD (DAY , - ABS (CHECKSUM (NEWID ())) % 3650 , SYSDATETIME ()) ,
	Amount				= CAST ((CHECKSUM (NEWID ()) % 100) AS MONEY)
FROM
	sys.all_columns AS T1
CROSS JOIN
	sys.all_columns AS T2;
END
GO

IF NOT EXISTS (SELECT NULL FROM Operation.SessionEvents)
INSERT INTO
	Operation.SessionEvents WITH (TABLOCK)
(
	MemberId ,
	SessionId ,
	EventTypeId ,
	DateAndTime ,
	URL
)
SELECT TOP (2000000)
	MemberId	= ABS (CHECKSUM (NEWID ())) % 100000 + 1 ,
	SessionId	= MemberSessions.Id ,
	EventTypeId	= ABS (CHECKSUM (NEWID ())) % 5 + 1 ,
	DateAndTime	= DATEADD (SECOND , ABS (CHECKSUM (NEWID ())) % DATEDIFF (SECOND , MemberSessions.LoginDateTime , ISNULL (MemberSEssions.EndDateTime , SYSDATETIME ())) , MemberSessions.LoginDateTime) ,
	URL			= N'www.madeiradata.com/' + REPLICATE (N'x' , ABS (CHECKSUM (NEWID ())) % 10 + 1)
FROM
	Operation.MemberSessions AS MemberSessions
CROSS JOIN
	sys.tables AS T1;

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET MULTI_USER 
    WITH ROLLBACK IMMEDIATE;


GO
PRINT N'Update complete.';


GO
